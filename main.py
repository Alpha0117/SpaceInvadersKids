##############################################################
# üöÄ JUEGO: SPACE INVADERS PARA NI√ëOS üëæ
##############################################################
# ¬°Hola! Este es un juego de naves espaciales donde t√∫ ser√°s el piloto
# y tendr√°s que defender la Tierra de invasores alien√≠genas.
# Si tienes entre 7 y 16 a√±os, ¬°este juego te ayudar√° a aprender
# c√≥mo se hacen los videojuegos!
#
# C√ìMO EST√Å ORGANIZADO ESTE PROGRAMA:
# Imagina que construimos una casa. Primero necesitamos los materiales,
# luego hacemos los cimientos, las paredes, y finalmente el techo.
# Un programa se construye de forma parecida:
#
# 1. IMPORTAR LIBRER√çAS: Son como nuestras herramientas m√°gicas
#    que nos permiten hacer cosas especiales, como mostrar im√°genes.
#
# 2. CONFIGURACI√ìN INICIAL: Preparamos la ventana del juego y definimos 
#    los colores que usaremos, como elegir los l√°pices para dibujar.
#
# 3. CREACI√ìN DE IM√ÅGENES: Dibujamos la nave, los alien√≠genas y los rayos l√°ser.
#
# 4. CARGA DE RECURSOS: Abrimos las im√°genes que usaremos en el juego.
#
# 5. CLASES DE OBJETOS: Es como crear un tipo especial de juguete con reglas.
#    - Clase Player: Es nuestra nave espacial que controlamos.
#    - Clase Laser: Son los rayos que dispara nuestra nave.
#    - Clase Enemy: Son los alien√≠genas que tenemos que derrotar.
#    - Clase Boss: Un alien√≠gena jefe m√°s dif√≠cil.
#    - Clase FastEnemy: Alien√≠genas que se mueven m√°s r√°pido.
#
# 6. FUNCI√ìN DE COLISIONES: Nos dice cuando un l√°ser golpea a un alien√≠gena.
#
# 7. FUNCI√ìN DE MEN√ö: Muestra las opciones al inicio del juego.
#
# 8. FUNCI√ìN PRINCIPAL: ¬°Aqu√≠ es donde ocurre toda la acci√≥n del juego!
#
# 9. FUNCI√ìN MODO DESAF√çO: Un modo especial m√°s dif√≠cil con jefes.
#
# 10. INICIO DEL JUEGO: Donde empezamos a jugar.
#
# ¬°Sigue leyendo si quieres aprender c√≥mo funciona todo! üéÆ
##############################################################

# ======== 1. IMPORTAR LIBRER√çAS ========
# Las librer√≠as son como cajas de herramientas m√°gicas que nos ayudan a hacer el juego
import pygame  # Esta librer√≠a nos permite crear videojuegos, dibujar y mostrar cosas en la pantalla
import sys     # Esta nos ayuda a cerrar el juego correctamente cuando queremos salir
import random  # Esta nos permite crear n√∫meros al azar, como lanzar un dado
import os      # Esta nos ayuda a trabajar con archivos y carpetas en el ordenador

# ======== 2. CONFIGURACI√ìN INICIAL ========
# ¬°Preparamos todo para que nuestro juego funcione!
pygame.init()  # Esta l√≠nea es como "encender" pygame para poder usarlo

# Configuramos el tama√±o de la ventana del juego
WIDTH, HEIGHT = 800, 600  # Ancho y alto de la pantalla en p√≠xeles (puntos de la pantalla)
screen = pygame.display.set_mode((WIDTH, HEIGHT))  # Creamos la ventana del juego
pygame.display.set_caption("Space Invaders para Ni√±os")  # Ponemos un t√≠tulo a la ventana

# Definimos los colores que usaremos en el juego
# Los colores se forman mezclando Rojo, Verde y Azul (RGB)
# Cada color puede tener un valor de 0 a 255
BLACK = (0, 0, 0)         # Negro (como el espacio): sin nada de rojo, verde ni azul
WHITE = (255, 255, 255)   # Blanco (como las estrellas): m√°ximo rojo, verde y azul
GREEN = (0, 255, 0)       # Verde brillante: m√°ximo verde, sin rojo ni azul
RED = (255, 0, 0)         # Rojo brillante: m√°ximo rojo, sin verde ni azul
BLUE = (0, 0, 255)        # Azul brillante: m√°ximo azul, sin rojo ni verde
LIGHT_BLUE = (135, 206, 250)  # Azul celeste: mezcla de un poco de rojo, bastante verde y mucho azul
PURPLE = (138, 43, 226)   # P√∫rpura/Morado: mezcla de rojo y azul, poco verde
YELLOW = (255, 255, 0)    # Amarillo brillante: m√°ximo rojo y verde, sin azul
ORANGE = (255, 165, 0)    # Naranja: m√°ximo rojo, bastante verde, sin azul
PINK = (251, 1, 232)      # Rosa Magenta Brillante: mucho rojo, casi nada de verde, bastante azul
CYAN = (0, 255, 255)      # Cian (azul verdoso): m√°ximo verde y azul, sin rojo
LIME = (50, 205, 50)      # Verde Lima: un poco de rojo, mucho verde, poco azul
MENU_BG = (25, 25, 50)    # Azul oscuro (para el fondo del men√∫)
BUTTON_COLOR = (75, 75, 200)  # Azul para botones
BUTTON_HOVER = (100, 100, 255)  # Azul m√°s claro para cuando pasamos el rat√≥n sobre botones

# Variables para controlar el men√∫ del juego
menu_active = True      # Esta variable nos dice si estamos en el men√∫ o no
game_mode = "normal"    # El modo de juego que elegimos (normal o desaf√≠o)
selected_option = 0     # La opci√≥n que tenemos seleccionada en el men√∫

# Variables para las opciones personalizables
nave_color = LIGHT_BLUE  # El color que tendr√° nuestra nave (podemos cambiarlo)
enemy_speed_multiplier = 1.0  # Qu√© tan r√°pido se mover√°n los enemigos (1.0 es velocidad normal)

# ======== 3. CREACI√ìN DE IM√ÅGENES ========
# Esta funci√≥n es como tener un cuaderno de dibujo donde creamos los personajes del juego
def create_images():
    # Primero nos aseguramos de tener una carpeta para guardar nuestros dibujos
    if not os.path.exists("imagenes"):
        os.makedirs("imagenes")  # Si no existe la carpeta, la creamos
    
    # Dibujamos nuestra nave espacial (un tri√°ngulo azul celeste)
    print("üöÄ Dibujando tu nave espacial...")
    nave = pygame.Surface((50, 50), pygame.SRCALPHA)  # Un lienzo transparente de 50x50 p√≠xeles
    pygame.draw.polygon(nave, LIGHT_BLUE, [(25, 0), (0, 50), (50, 50)])  # Dibujamos un tri√°ngulo
    pygame.image.save(nave, "imagenes/nave.png")  # Guardamos el dibujo como imagen
    
    # Dibujamos a los alien√≠genas (c√≠rculos morados)
    print("üëæ Dibujando a los alien√≠genas...")
    alien = pygame.Surface((40, 40), pygame.SRCALPHA)  # Un lienzo transparente de 40x40 p√≠xeles
    pygame.draw.circle(alien, PURPLE, (20, 20), 20)  # Dibujamos un c√≠rculo
    pygame.image.save(alien, "imagenes/alien.png")  # Guardamos el dibujo como imagen
    
    # Dibujamos los rayos l√°ser (rect√°ngulos azules)
    print("üí• Dibujando los rayos l√°ser...")
    laser = pygame.Surface((5, 20), pygame.SRCALPHA)  # Un lienzo transparente delgado
    pygame.draw.rect(laser, BLUE, (0, 0, 5, 20))  # Dibujamos un rect√°ngulo
    pygame.image.save(laser, "imagenes/laser.png")  # Guardamos el dibujo como imagen
    
    # Dibujamos el fondo del espacio (negro con estrellas)
    print("üåå Creando el espacio exterior...")
    fondo = pygame.Surface((800, 600))  # Un lienzo del tama√±o de nuestra ventana
    fondo.fill(BLACK)  # Pintamos todo de negro como el espacio
    
    # A√±adimos estrellas (peque√±os puntos blancos) por todo el espacio
    print("‚ú® A√±adiendo estrellas al espacio...")
    for _ in range(100):  # Vamos a a√±adir 100 estrellas
        x = random.randint(0, 800)  # Posici√≥n X al azar (horizontal)
        y = random.randint(0, 600)  # Posici√≥n Y al azar (vertical)
        pygame.draw.circle(fondo, WHITE, (x, y), 1)  # Dibujamos una estrella peque√±ita
    
    pygame.image.save(fondo, "imagenes/fondo.png")  # Guardamos el dibujo como imagen
    
    print("‚úÖ ¬°Todas las im√°genes se han creado correctamente!")

# ======== 4. CARGA DE RECURSOS ========
# Comprobamos si ya tenemos las im√°genes y si no, las creamos
print("üîç Buscando las im√°genes para el juego...")
if not os.path.exists("imagenes/nave.png") or \
   not os.path.exists("imagenes/alien.png") or \
   not os.path.exists("imagenes/laser.png") or \
   not os.path.exists("imagenes/fondo.png"):
    print("üñåÔ∏è No encontramos todas las im√°genes, vamos a crearlas...")
    create_images()
else:
    print("üìÅ ¬°Encontramos todas las im√°genes! Las usaremos para el juego.")

# Cargamos las im√°genes para usarlas en el juego
try:
    print("üì• Cargando las im√°genes en el juego...")
    player_img = pygame.image.load('imagenes/nave.png')  # Cargamos la imagen de la nave
    enemy_img = pygame.image.load('imagenes/alien.png')  # Cargamos la imagen del alien
    laser_img = pygame.image.load('imagenes/laser.png')  # Cargamos la imagen del l√°ser
    background_img = pygame.image.load('imagenes/fondo.png')  # Cargamos la imagen del fondo
    
    # Ajustamos el tama√±o de las im√°genes para que se vean bien en el juego
    player_img = pygame.transform.scale(player_img, (50, 50))  # Tama√±o de la nave
    enemy_img = pygame.transform.scale(enemy_img, (40, 40))  # Tama√±o del alien
    laser_img = pygame.transform.scale(laser_img, (5, 20))  # Tama√±o del l√°ser
    background_img = pygame.transform.scale(background_img, (WIDTH, HEIGHT))  # Tama√±o del fondo
    print("‚úÖ ¬°Im√°genes cargadas correctamente!")
except pygame.error as e:
    # Si hay alg√∫n problema al cargar las im√°genes, usaremos figuras geom√©tricas
    print(f"‚ùå Hubo un problema al cargar las im√°genes: {e}")
    print("üî∂ Usaremos figuras geom√©tricas en su lugar.")
    player_img = None  # No hay imagen de nave
    enemy_img = None   # No hay imagen de alien
    laser_img = None   # No hay imagen de l√°ser
    background_img = None  # No hay imagen de fondo

# ======== 5. CLASES DE OBJETOS ========
# Las clases son como "moldes" para crear objetos en el juego.
# Es como si tuvieras un molde para hacer galletas: cada galleta
# tendr√° la misma forma, pero pueden tener diferentes sabores o decoraciones.

# Clase del jugador (nuestra nave espacial)
class Player:
    def __init__(self, color=nave_color):
        # Esto se ejecuta cuando creamos una nueva nave
        self.x = WIDTH // 2  # Posici√≥n X (en medio de la pantalla)
        self.y = HEIGHT - 70  # Posici√≥n Y (cerca del fondo)
        self.speed = 5  # Qu√© tan r√°pido se mueve nuestra nave
        self.width = 50  # Ancho de la nave
        self.height = 50  # Alto de la nave
        self.lasers = []  # Lista para guardar los l√°seres que disparemos
        self.color = color  # Color de la nave (podemos cambiarlo)
    
    def draw(self):
        # Esta funci√≥n dibuja nuestra nave en la pantalla
        if player_img:  # Si tenemos una imagen de nave
            # Creamos una copia de la imagen y la pintamos del color elegido
            colored_ship = player_img.copy()
            # Creamos una capa del color seleccionado
            color_surface = pygame.Surface((self.width, self.height), pygame.SRCALPHA)
            color_surface.fill(self.color)
            # Mezclamos la imagen original con el color elegido
            colored_ship.blit(color_surface, (0, 0), special_flags=pygame.BLEND_RGBA_MULT)
            # Mostramos la nave en su posici√≥n
            screen.blit(colored_ship, (self.x, self.y))
        else:  # Si no tenemos imagen, dibujamos un rect√°ngulo
            pygame.draw.rect(screen, self.color, (self.x, self.y, self.width, self.height))
    
    def move(self, direction):
        # Esta funci√≥n mueve nuestra nave a la izquierda o derecha
        if direction == "left" and self.x > 0:  # Si vamos a la izquierda y no nos salimos
            self.x -= self.speed  # Movemos a la izquierda
        if direction == "right" and self.x < WIDTH - self.width:  # Si vamos a la derecha y no nos salimos
            self.x += self.speed  # Movemos a la derecha
    
    def shoot(self):
        # Esta funci√≥n hace que nuestra nave dispare un l√°ser
        # Creamos un l√°ser en la posici√≥n de la nave (en el centro y arriba)
        laser = Laser(self.x + self.width // 2 - 2, self.y)
        self.lasers.append(laser)  # Lo a√±adimos a la lista de l√°seres
    
    def update_lasers(self):
        # Esta funci√≥n actualiza todos los l√°seres que hemos disparado
        for laser in self.lasers[:]:  # Para cada l√°ser en la lista
            laser.move()  # Movemos el l√°ser
            if laser.y < 0:  # Si el l√°ser se sale de la pantalla por arriba
                self.lasers.remove(laser)  # Lo quitamos de la lista

# Clase del l√°ser (los rayos que dispara nuestra nave)
class Laser:
    def __init__(self, x, y):
        # Esto se ejecuta cuando creamos un nuevo l√°ser
        self.x = x  # Posici√≥n X (horizontal)
        self.y = y  # Posici√≥n Y (vertical)
        self.speed = 7  # Qu√© tan r√°pido sube el l√°ser (m√°s r√°pido que la nave)
        self.width = 5  # Ancho del l√°ser
        self.height = 20  # Alto del l√°ser
    
    def draw(self):
        # Esta funci√≥n dibuja el l√°ser en la pantalla
        if laser_img:  # Si tenemos una imagen de l√°ser
            screen.blit(laser_img, (self.x, self.y))  # Mostramos la imagen
        else:  # Si no tenemos imagen, dibujamos un rect√°ngulo azul
            pygame.draw.rect(screen, BLUE, (self.x, self.y, self.width, self.height))
    
    def move(self):
        # Esta funci√≥n mueve el l√°ser hacia arriba
        self.y -= self.speed  # Restamos a Y para que suba (en pantallas Y=0 es arriba)

# Clase del enemigo (los alien√≠genas que queremos derrotar)
class Enemy:
    def __init__(self, x, y, speed_multiplier=enemy_speed_multiplier):
        # Esto se ejecuta cuando creamos un nuevo alien√≠gena
        self.x = x  # Posici√≥n X (horizontal)
        self.y = y  # Posici√≥n Y (vertical)
        self.base_speed = 1  # Velocidad base (qu√© tan r√°pido se mueve normalmente)
        self.speed = self.base_speed * speed_multiplier  # Velocidad actual, puede aumentar
        self.width = 40  # Ancho del alien√≠gena
        self.height = 40  # Alto del alien√≠gena
        self.direction = 1  # Direcci√≥n: 1 es derecha, -1 es izquierda
    
    def draw(self):
        # Esta funci√≥n dibuja el alien√≠gena en la pantalla
        if enemy_img:  # Si tenemos una imagen de alien√≠gena
            screen.blit(enemy_img, (self.x, self.y))  # Mostramos la imagen
        else:  # Si no tenemos imagen, dibujamos un c√≠rculo morado
            pygame.draw.rect(screen, PURPLE, (self.x, self.y, self.width, self.height))
    
    def move(self):
        # Esta funci√≥n mueve al alien√≠gena de lado a lado
        self.x += self.speed * self.direction  # Movemos seg√∫n velocidad y direcci√≥n
        
        # Si el alien√≠gena llega al borde de la pantalla, cambia de direcci√≥n y baja un poco
        if self.x <= 0:  # Si llega al borde izquierdo
            self.x = 0  # Lo mantenemos en el borde
            self.direction = 1  # Cambiamos direcci√≥n hacia la derecha
            self.y += 20  # Bajamos un poco
        elif self.x + self.width >= WIDTH:  # Si llega al borde derecho
            self.x = WIDTH - self.width  # Lo mantenemos en el borde
            self.direction = -1  # Cambiamos direcci√≥n hacia la izquierda
            self.y += 20  # Bajamos un poco

# Clase de enemigo r√°pido (alien√≠genas que se mueven m√°s r√°pido)
class FastEnemy:
    def __init__(self, x, y, speed_multiplier=enemy_speed_multiplier):
        # Esto se ejecuta cuando creamos un nuevo alien√≠gena r√°pido
        self.x = x  # Posici√≥n X (horizontal)
        self.y = y  # Posici√≥n Y (vertical)
        self.base_speed = 2  # Velocidad base (el doble que un enemigo normal)
        self.speed = self.base_speed * speed_multiplier  # Velocidad actual, puede aumentar
        self.width = 30  # Un poco m√°s peque√±o que un enemigo normal
        self.height = 30  # Un poco m√°s peque√±o que un enemigo normal
        self.direction = 1  # Direcci√≥n: 1 es derecha, -1 es izquierda
    
    def draw(self):
        # Esta funci√≥n dibuja el alien√≠gena r√°pido (naranja con l√≠neas rojas)
        pygame.draw.rect(screen, ORANGE, (self.x, self.y, self.width, self.height))
        # A√±adimos l√≠neas rojas en X para que parezca peligroso
        pygame.draw.line(screen, RED, (self.x, self.y), (self.x + self.width, self.y + self.height), 2)
        pygame.draw.line(screen, RED, (self.x + self.width, self.y), (self.x, self.y + self.height), 2)
    
    def move(self):
        # Esta funci√≥n mueve al alien√≠gena r√°pido (puede cambiar de direcci√≥n al azar)
        self.x += self.speed * self.direction  # Movemos seg√∫n velocidad y direcci√≥n
        
        # A veces cambia de direcci√≥n aleatoriamente (para dar sorpresas)
        if random.randint(1, 100) == 1:  # 1% de probabilidad en cada actualizaci√≥n
            self.direction *= -1  # Multiplicar por -1 invierte la direcci√≥n
        
        # Si el alien√≠gena llega al borde de la pantalla, cambia de direcci√≥n
        if self.x <= 0:  # Si llega al borde izquierdo
            self.x = 0  # Lo mantenemos en el borde
            self.direction = 1  # Cambiamos direcci√≥n hacia la derecha
        elif self.x + self.width >= WIDTH:  # Si llega al borde derecho
            self.x = WIDTH - self.width  # Lo mantenemos en el borde
            self.direction = -1  # Cambiamos direcci√≥n hacia la izquierda

# Clase del jefe alien√≠gena (un enemigo m√°s grande y resistente)
class Boss:
    def __init__(self, x, y, speed_multiplier=enemy_speed_multiplier):
        # Esto se ejecuta cuando creamos un nuevo jefe alien√≠gena
        self.x = x  # Posici√≥n X (horizontal)
        self.y = y  # Posici√≥n Y (vertical)
        self.base_speed = 1.5  # Velocidad base (m√°s r√°pido que un enemigo normal)
        self.speed = self.base_speed * speed_multiplier  # Velocidad actual, puede aumentar
        self.width = 80  # El doble de grande que un enemigo normal
        self.height = 80  # El doble de grande que un enemigo normal
        self.direction = 1  # Direcci√≥n: 1 es derecha, -1 es izquierda
        self.health = 5  # Vida del jefe (necesita 5 disparos para ser derrotado)
    
    def draw(self):
        # Esta funci√≥n dibuja el jefe alien√≠gena (amarillo con ojos y boca rojos)
        pygame.draw.rect(screen, YELLOW, (self.x, self.y, self.width, self.height))
        
        # A√±adimos detalles para que parezca un jefe alien√≠gena asustador
        # Ojos rojos
        pygame.draw.circle(screen, RED, (int(self.x + self.width//4), int(self.y + self.height//3)), 10)
        pygame.draw.circle(screen, RED, (int(self.x + 3*self.width//4), int(self.y + self.height//3)), 10)
        
        # Boca roja
        pygame.draw.arc(screen, RED, 
                      (self.x + self.width//4, self.y + self.height//2, self.width//2, self.height//3),
                      0.2, 2.9, 3)
        
        # Barra de vida (se hace m√°s peque√±a cuando recibe da√±o)
        health_width = (self.width * self.health) // 5  # Ancho proporcional a la vida
        pygame.draw.rect(screen, GREEN, (self.x, self.y - 10, health_width, 5))
    
    def move(self):
        # Esta funci√≥n mueve al jefe alien√≠gena
        self.x += self.speed * self.direction  # Movemos seg√∫n velocidad y direcci√≥n
        
        # Si el jefe llega al borde de la pantalla, cambia de direcci√≥n
        if self.x <= 0:  # Si llega al borde izquierdo
            self.x = 0  # Lo mantenemos en el borde
            self.direction = 1  # Cambiamos direcci√≥n hacia la derecha
        elif self.x + self.width >= WIDTH:  # Si llega al borde derecho
            self.x = WIDTH - self.width  # Lo mantenemos en el borde
            self.direction = -1  # Cambiamos direcci√≥n hacia la izquierda

# ======== 6. FUNCI√ìN DE COLISIONES ========
# Esta funci√≥n comprueba si un l√°ser ha golpeado a un alien√≠gena
def check_collision(laser, enemy):
    # Las colisiones ocurren cuando dos objetos se tocan o se superponen
    # Comprobamos si el l√°ser est√° tocando al enemigo usando sus coordenadas
    # Para que haya una colisi√≥n, el l√°ser y el enemigo deben coincidir en el espacio
    if (laser.x < enemy.x + enemy.width and  # El l√°ser est√° a la izquierda del borde derecho del enemigo
        laser.x + laser.width > enemy.x and  # El l√°ser est√° a la derecha del borde izquierdo del enemigo
        laser.y < enemy.y + enemy.height and  # El l√°ser est√° arriba del borde inferior del enemigo
        laser.y + laser.height > enemy.y):   # El l√°ser est√° debajo del borde superior del enemigo
        return True  # ¬°Hay colisi√≥n! El l√°ser ha golpeado al enemigo
    return False  # No hay colisi√≥n, el l√°ser no ha golpeado al enemigo

# ======== 7. FUNCI√ìN DE MEN√ö ========
# Esta funci√≥n muestra el men√∫ principal donde elegimos c√≥mo queremos jugar
def show_menu():
    # Preparamos las letras para el men√∫
    title_font = pygame.font.SysFont(None, 80)  # Letra grande para el t√≠tulo
    menu_font = pygame.font.SysFont(None, 50)   # Letra mediana para las opciones
    
    # Lista de opciones que podemos elegir
    menu_options = ["Modo Normal", "Modo Desaf√≠o", "Opciones", "Salir"]
    
    # Opci√≥n que tenemos seleccionada (empezamos con la primera)
    selected = 0
    
    # Bucle del men√∫ (sigue mostr√°ndose hasta que elijamos una opci√≥n)
    while True:
        # Miramos qu√© teclas est√° presionando el jugador
        for event in pygame.event.get():
            if event.type == pygame.QUIT:  # Si cierra la ventana
                pygame.quit()  # Cerramos pygame
                sys.exit()  # Salimos del programa
            
            if event.type == pygame.KEYDOWN:  # Si presiona una tecla
                if event.key == pygame.K_UP:  # Si es la flecha arriba
                    # Movemos la selecci√≥n hacia arriba (si estamos en la primera, vamos a la √∫ltima)
                    selected = (selected - 1) % len(menu_options)
                
                if event.key == pygame.K_DOWN:  # Si es la flecha abajo
                    # Movemos la selecci√≥n hacia abajo (si estamos en la √∫ltima, vamos a la primera)
                    selected = (selected + 1) % len(menu_options)
                
                if event.key == pygame.K_RETURN:  # Si presiona Enter (para seleccionar)
                    if selected == 0:  # Modo Normal
                        return "normal"  # Elegimos el modo normal y salimos del men√∫
                    elif selected == 1:  # Modo Desaf√≠o
                        return "desafio"  # Elegimos el modo desaf√≠o y salimos del men√∫
                    elif selected == 2:  # Opciones
                        show_options()  # Mostramos la pantalla de opciones
                    elif selected == 3:  # Salir
                        pygame.quit()  # Cerramos pygame
                        sys.exit()  # Salimos del programa
        
        # Pintamos el fondo del men√∫
        screen.fill(MENU_BG)
        
        # Si tenemos imagen de fondo, la usamos con un efecto semitransparente
        if background_img:
            # Hacemos una copia de la imagen y la oscurecemos para el men√∫
            menu_bg = background_img.copy()
            dark_surface = pygame.Surface((WIDTH, HEIGHT), pygame.SRCALPHA)
            dark_surface.fill((0, 0, 0, 150))  # Negro semitransparente
            menu_bg.blit(dark_surface, (0, 0))
            screen.blit(menu_bg, (0, 0))
        
        # Dibujamos el t√≠tulo del juego
        title_text = title_font.render("SPACE INVADERS", True, WHITE)
        title_subtitle = menu_font.render("Para Ni√±os", True, LIGHT_BLUE)
        screen.blit(title_text, (WIDTH//2 - title_text.get_width()//2, 100))
        screen.blit(title_subtitle, (WIDTH//2 - title_subtitle.get_width()//2, 170))
        
        # Dibujamos estrellas decorativas alrededor del t√≠tulo
        for _ in range(20):
            star_x = random.randint(WIDTH//2 - 200, WIDTH//2 + 200)
            star_y = random.randint(80, 200)
            star_size = random.randint(1, 3)
            pygame.draw.circle(screen, WHITE, (star_x, star_y), star_size)
        
        # Dibujamos cada opci√≥n del men√∫
        for i, option in enumerate(menu_options):
            # Si esta opci√≥n est√° seleccionada, la pintamos amarilla, si no, blanca
            if i == selected:
                color = YELLOW  # Opci√≥n seleccionada
                # Dibujamos un cohete como cursor para se√±alar la opci√≥n seleccionada
                pygame.draw.polygon(screen, LIGHT_BLUE, [
                    (WIDTH//2 - 160, 280 + i * 70),
                    (WIDTH//2 - 180, 290 + i * 70),
                    (WIDTH//2 - 180, 310 + i * 70),
                    (WIDTH//2 - 160, 320 + i * 70)
                ])
                # Dibujamos el fuego del cohete
                pygame.draw.polygon(screen, ORANGE, [
                    (WIDTH//2 - 180, 295 + i * 70),
                    (WIDTH//2 - 190, 300 + i * 70),
                    (WIDTH//2 - 180, 305 + i * 70)
                ])
            else:
                color = WHITE  # Opciones no seleccionadas
            
            # Mostramos el texto de la opci√≥n
            option_text = menu_font.render(option, True, color)
            screen.blit(option_text, (WIDTH//2 - option_text.get_width()//2, 300 + i * 70))
        
        # A√±adimos instrucciones en la parte inferior
        instructions = pygame.font.SysFont(None, 24).render(
            "Usa ‚Üë‚Üì para moverte y ENTER para seleccionar", True, WHITE)
        screen.blit(instructions, (WIDTH//2 - instructions.get_width()//2, HEIGHT - 50))
        
        # Actualizamos la pantalla para que se vean los cambios
        pygame.display.update()
        
        # Controlamos la velocidad de actualizaci√≥n del men√∫
        pygame.time.Clock().tick(30)  # 30 im√°genes por segundo

# ======== 7.2 FUNCI√ìN DE OPCIONES ========
# Esta funci√≥n muestra la pantalla donde podemos personalizar el juego
def show_options():
    # Necesitamos poder cambiar estas variables que est√°n fuera de esta funci√≥n
    global nave_color, enemy_speed_multiplier
    
    # Preparamos las letras para el men√∫ de opciones
    title_font = pygame.font.SysFont(None, 60)  # Letra grande para el t√≠tulo
    option_font = pygame.font.SysFont(None, 40)  # Letra mediana para las opciones
    
    # Lista de colores entre los que podemos elegir para nuestra nave
    color_options = [
        {"name": "Azul Celeste", "color": LIGHT_BLUE},
        {"name": "Cian", "color": CYAN},
        {"name": "Verde Lima", "color": LIME},
        {"name": "Rojo", "color": RED},
        {"name": "Verde", "color": GREEN},
    ]
    
    # Buscamos cu√°l es el color actual de la nave en nuestra lista
    current_color_index = 0  # Empezamos asumiendo que es el primero
    for i, option in enumerate(color_options):
        if option["color"] == nave_color:  # Si encontramos el color actual
            current_color_index = i  # Guardamos su posici√≥n en la lista
            break
    
    # Lista de velocidades entre las que podemos elegir para los enemigos
    speed_options = [
        {"name": "Lento", "value": 0.5},    # Mitad de velocidad normal
        {"name": "Normal", "value": 1.0},   # Velocidad normal
        {"name": "R√°pido", "value": 1.5},   # 50% m√°s r√°pido que normal
        {"name": "Muy R√°pido", "value": 2.0},  # Doble de velocidad normal
    ]
    
    # Buscamos cu√°l es la velocidad actual en nuestra lista
    current_speed_index = 1  # Por defecto es "Normal" (√≠ndice 1)
    for i, option in enumerate(speed_options):
        # Comparamos con un peque√±o margen de error (por si hay decimales)
        if abs(option["value"] - enemy_speed_multiplier) < 0.1:
            current_speed_index = i  # Guardamos su posici√≥n en la lista
            break
    
    # Opci√≥n que tenemos seleccionada en el men√∫ de opciones
    selected_option = 0  # 0: Color de Nave, 1: Velocidad de Enemigos, 2: Guardar y Volver
    
    # Bucle de la pantalla de opciones
    while True:
        # Miramos qu√© teclas est√° presionando el jugador
        for event in pygame.event.get():
            if event.type == pygame.QUIT:  # Si cierra la ventana
                pygame.quit()  # Cerramos pygame
                sys.exit()  # Salimos del programa
            
            if event.type == pygame.KEYDOWN:  # Si presiona una tecla
                if event.key == pygame.K_UP:  # Si es la flecha arriba
                    # Movemos la selecci√≥n hacia arriba (de 0 a 2)
                    selected_option = (selected_option - 1) % 3
                
                if event.key == pygame.K_DOWN:  # Si es la flecha abajo
                    # Movemos la selecci√≥n hacia abajo (de 0 a 2)
                    selected_option = (selected_option + 1) % 3
                
                if event.key == pygame.K_LEFT:  # Si es la flecha izquierda
                    if selected_option == 0:  # Si estamos en Color de Nave
                        # Movemos a la opci√≥n anterior (o a la √∫ltima si estamos en la primera)
                        current_color_index = (current_color_index - 1) % len(color_options)
                        # Cambiamos el color de la nave al seleccionado
                        nave_color = color_options[current_color_index]["color"]
                    elif selected_option == 1:  # Si estamos en Velocidad de Enemigos
                        # Movemos a la opci√≥n anterior (o a la √∫ltima si estamos en la primera)
                        current_speed_index = (current_speed_index - 1) % len(speed_options)
                        # Cambiamos la velocidad de los enemigos a la seleccionada
                        enemy_speed_multiplier = speed_options[current_speed_index]["value"]
                
                if event.key == pygame.K_RIGHT:  # Si es la flecha derecha
                    if selected_option == 0:  # Si estamos en Color de Nave
                        # Movemos a la siguiente opci√≥n (o a la primera si estamos en la √∫ltima)
                        current_color_index = (current_color_index + 1) % len(color_options)
                        # Cambiamos el color de la nave al seleccionado
                        nave_color = color_options[current_color_index]["color"]
                    elif selected_option == 1:  # Si estamos en Velocidad de Enemigos
                        # Movemos a la siguiente opci√≥n (o a la primera si estamos en la √∫ltima)
                        current_speed_index = (current_speed_index + 1) % len(speed_options)
                        # Cambiamos la velocidad de los enemigos a la seleccionada
                        enemy_speed_multiplier = speed_options[current_speed_index]["value"]
                
                if event.key == pygame.K_RETURN:  # Si presiona Enter (para seleccionar)
                    if selected_option == 2:  # Si estamos en Guardar y Volver
                        return  # Volvemos al men√∫ principal guardando los cambios
                
                if event.key == pygame.K_ESCAPE:  # Si presiona Escape
                    return  # Volvemos al men√∫ principal
        
        # Pintamos el fondo del men√∫ de opciones
        screen.fill(MENU_BG)
        
        # Si tenemos imagen de fondo, la usamos con un efecto semitransparente
        if background_img:
            # Hacemos una copia de la imagen y la oscurecemos para el men√∫
            menu_bg = background_img.copy()
            dark_surface = pygame.Surface((WIDTH, HEIGHT), pygame.SRCALPHA)
            dark_surface.fill((0, 0, 0, 180))  # Negro m√°s oscuro que en el men√∫ principal
            menu_bg.blit(dark_surface, (0, 0))
            screen.blit(menu_bg, (0, 0))
        
        # Dibujamos el t√≠tulo de opciones
        title_text = title_font.render("OPCIONES", True, WHITE)
        screen.blit(title_text, (WIDTH//2 - title_text.get_width()//2, 100))
        
        # Lista de opciones que podemos cambiar
        options = ["Color de la Nave", "Velocidad de Enemigos", "Guardar y Volver"]
        
        # Dibujamos cada opci√≥n del men√∫
        for i, option in enumerate(options):
            # Si esta opci√≥n est√° seleccionada, la pintamos amarilla, si no, blanca
            text_color = YELLOW if i == selected_option else WHITE
            
            # Mostramos el texto de la opci√≥n
            option_text = option_font.render(option, True, text_color)
            
            # La opci√≥n "Guardar y Volver" va m√°s abajo que las otras
            y_pos = 220 + i * 100 if i < 2 else 450
            
            screen.blit(option_text, (WIDTH//2 - option_text.get_width()//2, y_pos))
            
            # Si es una opci√≥n que tiene un valor, mostramos el valor actual
            if i == 0:  # Color de Nave
                # Mostramos el nombre del color actual
                value_text = option_font.render(color_options[current_color_index]["name"], True, color_options[current_color_index]["color"])
                screen.blit(value_text, (WIDTH//2 - value_text.get_width()//2, y_pos + 40))
                
                # Dibujamos una muestra del color actual
                pygame.draw.rect(screen, color_options[current_color_index]["color"], (WIDTH//2 - 25, y_pos + 80, 50, 20))
                
                # Si esta opci√≥n est√° seleccionada, dibujamos flechas para indicar que podemos cambiarla
                if selected_option == 0:
                    left_arrow = pygame.font.SysFont(None, 50).render("‚óÄ", True, WHITE)
                    right_arrow = pygame.font.SysFont(None, 50).render("‚ñ∂", True, WHITE)
                    screen.blit(left_arrow, (WIDTH//2 - 100, y_pos + 40))
                    screen.blit(right_arrow, (WIDTH//2 + 100, y_pos + 40))
            
            elif i == 1:  # Velocidad de Enemigos
                # Mostramos el nombre de la velocidad actual
                value_text = option_font.render(speed_options[current_speed_index]["name"], True, WHITE)
                screen.blit(value_text, (WIDTH//2 - value_text.get_width()//2, y_pos + 40))
                
                # Dibujamos una barra que representa la velocidad
                bar_width = 200  # Ancho total de la barra
                bar_x = WIDTH//2 - bar_width//2  # Posici√≥n X de la barra (centrada)
                # Dibujamos el borde de la barra
                pygame.draw.rect(screen, WHITE, (bar_x, y_pos + 80, bar_width, 10), 1)
                
                # Calculamos cu√°nto de la barra debe estar lleno seg√∫n la velocidad
                fill_width = int(bar_width * (speed_options[current_speed_index]["value"] / speed_options[-1]["value"]))
                # Rellenamos la barra con color seg√∫n la velocidad
                # Verde para velocidades lentas, naranja para r√°pido, rojo para muy r√°pido
                fill_color = GREEN if current_speed_index < 2 else ORANGE if current_speed_index == 2 else RED
                pygame.draw.rect(screen, fill_color, (bar_x, y_pos + 80, fill_width, 10))
                
                # Si esta opci√≥n est√° seleccionada, dibujamos flechas para indicar que podemos cambiarla
                if selected_option == 1:
                    left_arrow = pygame.font.SysFont(None, 50).render("‚óÄ", True, WHITE)
                    right_arrow = pygame.font.SysFont(None, 50).render("‚ñ∂", True, WHITE)
                    screen.blit(left_arrow, (WIDTH//2 - 120, y_pos + 40))
                    screen.blit(right_arrow, (WIDTH//2 + 120, y_pos + 40))
        
        # A√±adimos instrucciones en la parte inferior
        instructions = pygame.font.SysFont(None, 24).render(
            "Usa ‚Üë‚Üì para moverte, ‚Üê‚Üí para cambiar valores y ENTER para guardar", True, WHITE)
        screen.blit(instructions, (WIDTH//2 - instructions.get_width()//2, HEIGHT - 50))
        
        # Actualizamos la pantalla para que se vean los cambios
        pygame.display.update()
        
        # Controlamos la velocidad de actualizaci√≥n del men√∫
        pygame.time.Clock().tick(30)  # 30 im√°genes por segundo

# ======== 8. FUNCI√ìN PRINCIPAL ========
# Funci√≥n principal del juego (¬°aqu√≠ ocurre toda la acci√≥n!)
def main(mode="normal"):
    player = Player(color=nave_color)  # Creamos al jugador con el color seleccionado
    enemies = []  # Lista para guardar a los enemigos
    fast_enemies = []  # Lista para los enemigos r√°pidos (solo en modo desaf√≠o)
    boss = None  # Variable para el jefe (solo en modo desaf√≠o)
    clock = pygame.time.Clock()  # Reloj para controlar la velocidad del juego
    score = 0  # Puntuaci√≥n inicial
    game_over = False  # El juego no ha terminado
    level = 1  # Empezamos en el nivel 1
    
    # Configuramos la letra para mostrar texto
    font = pygame.font.SysFont(None, 36)  # Tipo y tama√±o de letra
    
    # Creamos los enemigos iniciales (formando filas y columnas)
    for i in range(6):  # 6 columnas
        for j in range(3):  # 3 filas
            enemy = Enemy(100 + i * 100, 50 + j * 70, speed_multiplier=enemy_speed_multiplier)  # Posici√≥n de cada enemigo con la velocidad seleccionada
            enemies.append(enemy)  # A√±adimos el enemigo a la lista
    
    # En modo desaf√≠o, a√±adimos algunos enemigos r√°pidos
    if mode == "desafio":
        for i in range(3):  # 3 enemigos r√°pidos
            fast_enemy = FastEnemy(200 + i * 150, 30, speed_multiplier=enemy_speed_multiplier)
            fast_enemies.append(fast_enemy)
    
    # Bucle principal del juego (se repite constantemente mientras jugamos)
    while True:
        # Comprobamos si el jugador quiere hacer algo
        for event in pygame.event.get():
            if event.type == pygame.QUIT:  # Si el jugador cierra la ventana
                pygame.quit()  # Cerramos pygame
                sys.exit()  # Salimos del programa
            
            if event.type == pygame.KEYDOWN:  # Si se presiona una tecla
                if event.key == pygame.K_SPACE and not game_over:  # Si es la barra espaciadora y el juego no ha terminado
                    player.shoot()  # Disparamos un l√°ser
                if event.key == pygame.K_RETURN and game_over:  # Si es Enter y el juego ha terminado
                    # Volvemos al men√∫ principal
                    return
                if event.key == pygame.K_ESCAPE:  # Si es Escape
                    return  # Volvemos al men√∫ principal
        
        if game_over:
            # Si el juego ha terminado, mostramos la pantalla de "Game Over"
            screen.fill(BLACK)  # Fondo negro
            
            # Preparamos los textos que queremos mostrar
            game_over_text = font.render("¬°Juego Terminado!", True, WHITE)  # Mensaje de fin
            score_text = font.render(f"Puntuaci√≥n: {score}", True, WHITE)  # Puntuaci√≥n final
            level_text = font.render(f"Nivel alcanzado: {level}", True, LIGHT_BLUE)  # Nivel final
            
            if mode == "desafio":
                mode_text = font.render("Modo: DESAF√çO", True, ORANGE)  # Indicamos que era modo desaf√≠o
            else:
                mode_text = font.render("Modo: Normal", True, WHITE)  # Indicamos que era modo normal
                
            restart_text = font.render("Presiona ENTER para volver al men√∫", True, WHITE)  # Instrucci√≥n para reiniciar
            
            # Mostramos los textos en la pantalla, centrados
            screen.blit(game_over_text, (WIDTH//2 - game_over_text.get_width()//2, HEIGHT//2 - 100))
            screen.blit(score_text, (WIDTH//2 - score_text.get_width()//2, HEIGHT//2 - 50))
            screen.blit(level_text, (WIDTH//2 - level_text.get_width()//2, HEIGHT//2))
            screen.blit(mode_text, (WIDTH//2 - mode_text.get_width()//2, HEIGHT//2 + 50))
            screen.blit(restart_text, (WIDTH//2 - restart_text.get_width()//2, HEIGHT//2 + 100))
            
            pygame.display.update()  # Actualizamos la pantalla
            continue  # Volvemos al inicio del bucle (no procesamos el resto)
        
        # Controlamos el movimiento del jugador con las flechas del teclado
        keys = pygame.key.get_pressed()  # Obtenemos qu√© teclas est√°n presionadas
        if keys[pygame.K_LEFT]:  # Si presionamos la flecha izquierda
            player.move("left")  # Movemos la nave a la izquierda
        if keys[pygame.K_RIGHT]:  # Si presionamos la flecha derecha
            player.move("right")  # Movemos la nave a la derecha
        
        # Actualizamos la posici√≥n de todos los l√°seres
        player.update_lasers()
        
        # Controlamos el movimiento de los enemigos
        # Ya no necesitamos verificar l√≠mites aqu√≠, cada enemigo lo hace por s√≠ mismo
        for enemy in enemies:
            enemy.move()  # Movemos al enemigo
            
            # Si un enemigo llega a la altura de nuestra nave
            if enemy.y + enemy.height >= player.y:
                game_over = True  # El juego termina
        
        # En modo desaf√≠o, movemos tambi√©n los enemigos r√°pidos
        if mode == "desafio":
            # Mover enemigos r√°pidos
            for enemy in fast_enemies:
                enemy.move()
                
                # Si un enemigo r√°pido llega a la altura de nuestra nave
                if enemy.y + enemy.height >= player.y:
                    game_over = True  # El juego termina
            
            # Si hay un jefe, lo movemos
            if boss:
                boss.move()
                
                # Si el jefe llega a la altura de nuestra nave
                if boss.y + boss.height >= player.y:
                    game_over = True  # El juego termina
        
        # Comprobamos si alg√∫n l√°ser golpea a alg√∫n enemigo
        for laser in player.lasers[:]:
            hit = False  # Por defecto, no hay impacto
            
            # Verificar colisi√≥n con enemigos normales
            for enemy in enemies[:]:
                if check_collision(laser, enemy):  # Si el l√°ser golpea al enemigo
                    player.lasers.remove(laser)  # Quitamos el l√°ser
                    enemies.remove(enemy)  # Quitamos al enemigo
                    score += 10  # Aumentamos la puntuaci√≥n
                    hit = True  # Hubo un impacto
                    break
            
            # Si ya hubo un impacto, pasamos al siguiente l√°ser
            if hit:
                continue
            
            # En modo desaf√≠o, verificar colisi√≥n con enemigos r√°pidos
            if mode == "desafio":
                for enemy in fast_enemies[:]:
                    if check_collision(laser, enemy):
                        player.lasers.remove(laser)
                        fast_enemies.remove(enemy)
                        score += 20  # Los enemigos r√°pidos dan m√°s puntos
                        hit = True
                        break
                
                # Si ya hubo un impacto, pasamos al siguiente l√°ser
                if hit:
                    continue
                
                # Verificar colisi√≥n con el jefe
                if boss and check_collision(laser, boss):
                    player.lasers.remove(laser)
                    boss.health -= 1  # El jefe pierde una vida
                    
                    # Si el jefe se queda sin vida
                    if boss.health <= 0:
                        boss = None  # Eliminamos al jefe
                        score += 100  # El jefe da muchos puntos
        
        # Si no quedan enemigos, pasamos al siguiente nivel
        if len(enemies) == 0 and len(fast_enemies) == 0 and boss is None:
            level += 1  # Aumentamos el nivel
            
            # Creamos nuevos enemigos (m√°s r√°pidos que en el nivel anterior)
            for i in range(6):
                for j in range(3):
                    enemy = Enemy(100 + i * 100, 50 + j * 70, speed_multiplier=enemy_speed_multiplier)
                    # La velocidad aumenta un 5% con cada nivel pero tambi√©n respeta el multiplicador del usuario
                    enemy.base_speed = 1 + level * 0.05  # Aumentamos la velocidad base un 5% por nivel
                    enemy.speed = enemy.base_speed * enemy_speed_multiplier  # Aplicamos el multiplicador
                    enemies.append(enemy)
            
            # En modo desaf√≠o, a√±adimos enemigos r√°pidos en niveles pares
            if mode == "desafio":
                # En niveles pares a√±adimos enemigos r√°pidos
                if level % 2 == 0:
                    for i in range(level // 2):  # M√°s enemigos r√°pidos en niveles superiores
                        fast_enemy = FastEnemy(100 + i * 150, 30, speed_multiplier=enemy_speed_multiplier)
                        # Los enemigos r√°pidos tambi√©n aumentan su velocidad un 5% por nivel
                        fast_enemy.base_speed = 2 + level * 0.05  # Aumentamos la velocidad base un 5% por nivel
                        fast_enemy.speed = fast_enemy.base_speed * enemy_speed_multiplier  # Aplicamos el multiplicador
                        fast_enemies.append(fast_enemy)
                
                # En niveles divisibles por 3, a√±adimos un jefe
                if level % 3 == 0:
                    boss = Boss(WIDTH // 2 - 40, 50, speed_multiplier=enemy_speed_multiplier)
                    boss.health = 5 + level // 3  # El jefe tiene m√°s vida en niveles superiores
                    # El jefe tambi√©n aumenta su velocidad un 5% por nivel
                    boss.base_speed = 1.5 + level * 0.05  # Aumentamos la velocidad base un 5% por nivel
                    boss.speed = boss.base_speed * enemy_speed_multiplier  # Aplicamos el multiplicador
        
        # Dibujamos todo en la pantalla
        if background_img:  # Si tenemos imagen de fondo
            screen.blit(background_img, (0, 0))  # La mostramos
        else:  # Si no tenemos imagen
            screen.fill(BLACK)  # Pintamos la pantalla de negro
        
        # Dibujamos la nave del jugador
        player.draw()
        
        # Dibujamos todos los l√°seres
        for laser in player.lasers:
            laser.draw()
        
        # Dibujamos todos los enemigos
        for enemy in enemies:
            enemy.draw()
        
        # En modo desaf√≠o, dibujamos los enemigos r√°pidos y el jefe
        if mode == "desafio":
            for enemy in fast_enemies:
                enemy.draw()
            
            if boss:
                boss.draw()
        
        # Mostramos la puntuaci√≥n y el nivel actual
        score_text = font.render(f"Puntuaci√≥n: {score}", True, WHITE)
        level_text = font.render(f"Nivel: {level}", True, WHITE)
        
        # En modo desaf√≠o, mostramos el modo de juego
        if mode == "desafio":
            mode_text = font.render("¬°MODO DESAF√çO!", True, ORANGE)
            screen.blit(mode_text, (WIDTH // 2 - mode_text.get_width() // 2, 10))
        
        screen.blit(score_text, (10, 10))  # Puntuaci√≥n en la esquina superior izquierda
        screen.blit(level_text, (WIDTH - 120, 10))  # Nivel en la esquina superior derecha
        
        # Mostramos instrucci√≥n para volver al men√∫
        esc_text = pygame.font.SysFont(None, 20).render("Presiona ESC para volver al men√∫", True, WHITE)
        screen.blit(esc_text, (10, HEIGHT - 30))
        
        # Actualizamos la pantalla para mostrar todo lo que hemos dibujado
        pygame.display.update()
        
        # Controlamos la velocidad del juego (60 fotogramas por segundo)
        clock.tick(60)  # Como si fueran 60 p√°ginas de un libro animado por segundo

# ======== 9. FUNCI√ìN MODO DESAF√çO ========
# Funci√≥n para el modo especial con jefes y enemigos r√°pidos
def challenge_mode():
    # Implementa la l√≥gica para el modo desaf√≠o
    pass

# ======== 10. INICIO DEL JUEGO ========
# Iniciamos el juego cuando ejecutamos este archivo
if __name__ == "__main__":  # Esto significa "si estamos ejecutando este archivo directamente"
    while True:
        # Mostramos el men√∫ principal
        game_mode = show_menu()
        
        # Iniciamos el juego en el modo seleccionado
        main(game_mode) 